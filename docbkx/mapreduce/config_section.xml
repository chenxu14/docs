<?xml version="1.0" encoding="UTF-8"?>
<section version="5.0" xmlns="http://docbook.org/ns/docbook"
	xmlns:xlink="http://www.w3.org/1999/xlink"
	xmlns:xi="http://www.w3.org/2001/XInclude"
	xmlns:ns5="http://www.w3.org/2000/svg"
	xmlns:ns4="http://www.w3.org/1998/Math/MathML"
	xmlns:ns3="http://www.w3.org/1999/xhtml"
	xmlns:db="http://docbook.org/ns/docbook">
	<title>配置参数</title>
	<table frame='all'>
		<title>MapReduce配置参数</title>
		<tgroup cols='3' align='left' colsep='1' rowsep='1'>
			<colspec colname='c1' colwidth="16.5em"/>
			<colspec colname='c2'/>
			<colspec colname='c3' colwidth="9em"/>
			<thead>
				<row><entry>属性名称</entry><entry>描述</entry><entry>默认值</entry></row>
			</thead>
			<tbody>
				<row><entry namest="c1" nameend="c3" align="left">map端配置</entry></row>
				<row>
					<entry>io.sort.mb</entry>
					<entry>map任务的输出首先缓存到内存里，在内存中执行排序和分区，内存数据到达一定阀值后在spill到磁盘，如果map任务输出的数据量比较大可适当调高该值，以此来降低磁盘操作次数。</entry>
					<entry>100M</entry>
				</row>
				<row>
					<entry>io.sort.record.percent</entry>
					<entry>缓存记录边界的内存所占io.sort.mb总内存的百分比，这部分内存相当于数据索引</entry>
					<entry>0.05</entry>
				</row>
				<row>
					<entry>io.sort.spill.percent</entry>
					<entry>当io.sort.mb的内存使用达到指定百分比时，开始执行spill操作，将数据写入磁盘</entry>
					<entry>0.80</entry>
				</row>
				<row>
					<entry>io.sort.factor</entry>
					<entry>map的输出可能会产生多个spill文件，map退出前需要将这些spill文件合并，该参数用来指定最多可以有多少个stream参与并发合并</entry>
					<entry>10</entry>
				</row>
				<row>
					<entry>min.num.spill.for.combine</entry>
					<entry>该参数决定了combiner函数的触发时机(spill文件合并前还是合并后)，默认为3，表示spill数量最少有3个的时候combiner函数发生在spill文件合并之前，可适当提高该值使combiner发生在spill文件合并之后，以此来降低磁盘操作次数</entry>
					<entry>3</entry>
				</row>
				<row>
					<entry>mapred.compress.map.output</entry>
					<entry>是否对map输出结果进行压缩，开启压缩功能可以很大程度提高IO效率，但是会消耗一部分CPU资源，从性能上考虑这种转换往往是值得的</entry>
					<entry>false</entry>
				</row>
				<row>
					<entry>mapred.map.output.compression. codec</entry>
					<entry>所采用的压缩算法</entry>
					<entry>DefaultCodec</entry>
				</row>
				<row><entry namest="c1" nameend="c3" align="left">reduce端配置</entry></row>
				<row>
					<entry>mapred.reduce.parallel.copies</entry>
					<entry>每个reduce任务默认开启5个线程来执行map输出的拷贝操作，适当提高线程数可加快拷贝进度</entry>
					<entry>5</entry>
				</row>
				<row>
					<entry>mapred.reduce.copy.backoff</entry>
					<entry>如果在指定时间内(默认300秒)map数据没有拷贝成功，则放弃这次拷贝操作</entry>
					<entry>300秒</entry>
				</row>
				<row>
					<entry>io.sort.factor</entry>
					<entry>reduce将map数据拷贝到本地后同样需要执行合并操作，通过提高该参数来降低IO等待时间(cpu换IO)</entry>
					<entry>10</entry>
				</row>
				<row>
					<entry>mapred.job.shuffle.input.buffer. percent</entry>
					<entry>缓存shuffle数据的内存所占堆内存的百分比，适当提高该比例可有效降低磁盘IO次数</entry>
					<entry>0.7</entry>
				</row>
				<row>
					<entry>mapred.job.shuffle.merge.percent</entry>
					<entry>缓存shuffle的内存使用达到指定百分比时，合并到磁盘数据</entry>
					<entry>0.66</entry>
				</row>
				<row>
					<entry>mapred.job.reduce.input.buffer. percent</entry>
					<entry>默认百分比为0，表示reduce的输入数据全部从磁盘获取，提高该比例后，reduce的部分输入源会从内存中获取</entry>
					<entry>0</entry>
				</row>
			</tbody>
		</tgroup>
	</table>
	<para>调优方法：</para>
	<para>MapReduce的性能瓶颈往往出现在磁盘IO上，常用的弥补措施</para>
	<para>1：用内存来换取IO，使sort和merge等操作尽量在内存中来完成，降低磁盘IO次数</para>
	<para>2：用CPU来换取IO，启用数据压缩，加大并发线程数</para>
	<para>3：不要使用LVM来管理磁盘空间</para>
</section>