<?xml version="1.0" encoding="UTF-8"?>
<section version="5.0" xmlns="http://docbook.org/ns/docbook"
	xmlns:xlink="http://www.w3.org/1999/xlink"
	xmlns:xi="http://www.w3.org/2001/XInclude"
	xmlns:ns5="http://www.w3.org/2000/svg"
	xmlns:ns4="http://www.w3.org/1998/Math/MathML"
	xmlns:ns3="http://www.w3.org/1999/xhtml"
	xmlns:db="http://docbook.org/ns/docbook">
	<title>Region分配</title>
	<para>RegionServer宕机以后，其上部署的Region将会被重新分配处理，这些Region包括：</para>
	<itemizedlist make='bullet'>
		<listitem>
			<para>正在执行上线/下线操作的Region</para>
			<para>针对这些Region，首先删除ZK中对应的/hbase/region-in-transition/{regionName}节点，并将内存和META表格中的对应的记录修改为OFFLINE状态。具体逻辑可参考AssignmentManager的processServerShutdown方法以及ServerShutdownHandler线程逻辑。</para>
		</listitem>
		<listitem>
			<para>已经上线的或正在执行合并/拆分操作的Region</para>
			<para>针对这些Region在重新分配前首先对其进行下线处理(修改META表格和内存中对应记录的状态为OFFLINE)，并将下线成功的Region从regionsInTransition和regionAssignments集合中移除。具体逻辑可参考RegionStates的regionOffline方法。</para>
		</listitem>
	</itemizedlist>
	<para>Region在分配过程中主要是通过AssignmentManager的assign(List&lt;HRegionInfo> regions)方法来完成的，具体逻辑如下：</para>
	<para>一、构造分配计划</para>
	<para>首先查找集群中有哪些RegionServer可以部署Region，并将其加入servers集合。然后以roundRobin的方式将待部署的Regions分配给servers，并保证在分配过程中Region的两个副本没有部署在同一台机器或同一个机架上(代码逻辑参考BaseLoadBalancer类的roundRobinAssignment方法)。</para>
	<para>分配计划是通过如下数据结构来封装的：</para>
	<blockquote><para>Map&lt;ServerName, List&lt;HRegionInfo>> : plans</para></blockquote>
	<para>其中key为RegionServer，value为分配到它上面的Regions。</para>
	<para>二、执行分配逻辑</para>
	<para>根据步骤1所构造的分配计划来执行具体的分配任务，执行分配前，首先判断是否有必要采用多线程的方式来执行bulkAssign分配，判断标准如下：</para>
	<blockquote>
		<para>(1)plans数量大于3(hbase.bulk.assignment.threshold.servers参数指定)</para>
		<para>(2)待部署的Region总数大于7(hbase.bulk.assignment.threshold.regions参数指定)</para>
	</blockquote>
	<para>如果满足以上任意一项条件，开始构造BulkAssigner对象，并通过其bulkAssign方法来实现Region的并发分配。bulkAssign方法在执行过程中，会针对每一个plan开启SingleServerBulkAssigner线程，线程在运行期间主要做如下处理：</para>
	<orderedlist>
		<listitem><para>首先遍历每一个待上线的Region，并对其执行forceRegionStateToOffline操作来强制将其标记为OFFLINE状态；</para></listitem>
		<listitem><para>针对每一个被标记成OFFLINE状态的Region，Zookeeper会创建与其对应的/hbase/region-in-transition/{regionName}节点，节点内容为RegionTransition对象，其eventType属性值为M_ZK_REGION_OFFLINE(代码逻辑参考AssignmentManager类的asyncSetOfflineInZooKeeper方法)；</para></listitem>
		<listitem><para>在META表格和内存中将每个待上线的Region标记成PENDING_OPEN状态；</para></listitem>
		<listitem>
			<para>调用ServerManager的sendRegionOpen方法，通过RPC请求将待上线的Regions发送到目标RegionServer上进行部署(详细参考Region加载章节)，</para>
		</listitem>
		<listitem><para>针对上线失败的Region，AssignmentManager会开启额外的AssignCallable线程执行二次上线申请，线程在运行过程中会尝试将Region部署到其他RegionServer上，如果尝试10次依然失败(hbase.assignment.maximum.attempts参数控制)，则放弃分配处理，并将该Region标记为FAILED_OPEN状态。</para></listitem>
	</orderedlist>
	<para>bulkAssign执行过程中，主线程会处于等待状态，默认等待时间通过GeneralBulkAssigner类的getTimeoutOnRIT方法来计算，如果指定时间过后，依然有SingleServerBulkAssigner线程处于尚未运行结束的状态则强行将其终止，并打印如下警告信息：</para>
	<blockquote><para>bulk assigner is still running after {time} ms, shut it down now</para></blockquote>
	<para>待所有SingleServerBulkAssigner线程运行终止后，针对所有运行失败的分配计划，AssignManager会为每个Region开启额外的AssignCallable线程来进行重新分配。</para>
	<section>
		<title>配置参数</title>
		<orderedlist>
			<listitem>
				<para>hbase.assignment.usezk</para>
				<para>是否基于Zookeeper做Region分配，默认为true。</para>
			</listitem>
			<listitem>
				<para>hbase.assignment.maximum.attempts</para>
				<para>分配失败后重新尝试的次数，默认为10次。</para>
			</listitem>
			<listitem>
				<para>hbase.bulk.assignment.threshold.regions</para>
				<para>待分配的Region数大于该参数值时(默认值为7)，采用bulkAssign分配策略.</para>
			</listitem>
			<listitem>
				<para>hbase.bulk.assignment.threshold.servers</para>
				<para>集群中可用的RegionServer数大于该参数值时(默认值为3)，采用bulkAssign分配策略.</para>
			</listitem>
			<listitem>
				<para>hbase.bulk.assignment.threadpool.size</para>
				<para>bulkAssign线程池中所允许的并发线程数(默认值为20)。</para>
			</listitem>
			<listitem>
				<para>hbase.bulk.assignment.waiton.empty.rit</para>
				<para>bulkAssign执行的最长等待时间，超过该时间将强行终止所有的SingleServerBulkAssigner线程，默认等待时间为5分钟。</para>
				<para>当采用GeneralBulkAssigner时，等待时间基于另外一种公式来计算，详细可参考GeneralBulkAssigner的getTimeoutOnRIT方法。</para>
			</listitem>
			<listitem>
				<para>hbase.bulk.assignment.waittillallassigned</para>
				<para>是否等待所有Region都上线成功之后在退出bulkAssign操作，默认为false，表示当所有SingleServerBulkAssigner线程运行结束后便退出bulkAssign，而不去等待AssignCallable等其他线程的执行结果。</para>
			</listitem>
			<listitem>
				<para>hbase.assignment.threads.max</para>
				<para>AssignCallable线程的最大并发数，默认值为30。</para>
			</listitem>
			<listitem>
				<para>hbase.assignment.zkevent.workers</para>
				<para>响应ZK分配事件的最大线程数，每当/hbase/region-in-transition/{regionName}节点数据发生变动时，AssignmentManager会开启单独的线程进行相应的回调处理，默认值为20。</para>
			</listitem>
		</orderedlist>
	</section>
</section>