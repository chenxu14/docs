<?xml version="1.0" encoding="UTF-8"?>
<section version="5.0" xmlns="http://docbook.org/ns/docbook"
	xmlns:xlink="http://www.w3.org/1999/xlink"
	xmlns:xi="http://www.w3.org/2001/XInclude"
	xmlns:ns5="http://www.w3.org/2000/svg"
	xmlns:ns4="http://www.w3.org/1998/Math/MathML"
	xmlns:ns3="http://www.w3.org/1999/xhtml"
	xmlns:db="http://docbook.org/ns/docbook">
	<title>常用配置</title>
	<table frame='all'>
		<title>HBase常用配置</title>
		<tgroup cols='3' align='left' colsep='1' rowsep='1'>
			<colspec colname='c1' colwidth="16.5em"/>
			<colspec colname='c2'/>
			<colspec colname='c3' colwidth="9em"/>
			<thead>
				<row><entry>属性名称</entry><entry>描述</entry><entry>默认值</entry></row>
			</thead>
			<tbody>
				<row><entry namest="c1" nameend="c3" align="left">集群搭建后需要修改的配置</entry></row>
				<row>
					<entry>hbase.zookeeper.quorum</entry>
					<entry>zookeeper群组地址，逗号分隔</entry>
					<entry>localhost</entry>
				</row>
				<row>
					<entry>hbase.zookeeper.property.dataDir</entry>
					<entry>zookeeper数据快照存储地址</entry>
					<entry>${hbase.tmp.dir}/ zookeeper</entry>
				</row>
				<row>
					<entry>hbase.rootdir</entry>
					<entry>hbase存储根目录</entry>
					<entry>${hbase.tmp.dir}/ hbase</entry>
				</row>
				<row>
					<entry>hbase.cluster.distributed</entry>
					<entry>是否采用集群的方式部署</entry>
					<entry>false</entry>
				</row>
				<row><entry namest="c1" nameend="c3" align="left">以下属性的默认值不影响系统的使用，但可做性能调优来修改</entry></row>
				<row>
					<entry>hbase.master.wait.on. regionservers.mintostart</entry>
					<entry>当指定数量的RegionServer启动后，在执行Region分配</entry>
					<entry>1</entry>
				</row>
				<row>
					<entry>fail.fast.expired.active.master</entry>
					<entry>master失去zookeeper的连接session后不再尝试重新连接</entry>
					<entry>false</entry>
				</row>
				<row>
					<entry>zookeeper.session.timeout</entry>
					<entry>RegionServer宕机后，Zookeeper不会立刻通知Master，而是等待一段时间(毫秒)，希望这段时间内RegionServer可以重新建立连接，如果连接建立失败则通知Master将其管理的region进行重新分配。</entry>
					<entry>90000</entry>
				</row>
				<row>
					<entry>hbase.regionserver.handler.count</entry>
					<entry>RegionServer响应用户请求的IO线程数，如果每次请求的数据负载量比较大，需要将该数值调低，防止负载数据占用过多内存，引发OutOfMemoryError</entry>
					<entry>30</entry>
				</row>
				<row>
					<entry>hbase.hregion.max.filesize</entry>
					<entry>每个Region的最大存储空间，超过该上限Region将被拆分。Region并不是越大越好，因为这意味着在对StoreFile合并和Region拆分的处理上将要消耗更多的系统资源。而如果想要关闭Region的自动拆分功能，可将该属性设置一个偏大的值(e.g.100GB)，然后在系统空闲时通过RegionSplitter来手动对Region执行拆分操作</entry>
					<entry>10GB</entry>
				</row>
				<row>
					<entry>hbase.hregion.memstore.mslab. chunksize</entry>
					<entry>mslab用于解决内存碎片的问题，其在内存上申请了连续的地址空间来作为memstore的存储单元(chunk)，每个chunk的默认大小为2M，容量满了之后开启下一个chunk来存储，需要注意的是即使在memstore没有存储数据的情况下默认也会占用一个chunk的内存空间。因此如果RegionServer管理的Region数量比较多的话，需要预留更多的内存来作为mslab</entry>
					<entry>2MB</entry>
				</row>
				<row>
					<entry>hbase.hregion.memstore.flush. size</entry>
					<entry>单个Region的memstore大小超过指定值时，开始执行flush操作</entry>
					<entry>128M</entry>
				</row>
				<row>
					<entry>hbase.regionserver.global. memstore.lowerLimit</entry>
					<entry>memstores所占内存总量达到lowerLimit百分比时，开始强制执行flush操作，此时RegionServer依然会响应写操作请求</entry>
					<entry>0.38</entry>
				</row>
				<row>
					<entry>hbase.regionserver.global. memstore.upperLimit</entry>
					<entry>memstores所占内存总量达到upperLimit百分比时，所有对RegionServer的写请求将阻塞，直至内存恢复至lowerLimit百分比</entry>
					<entry>0.4</entry>
				</row>
				<row>
					<entry>hfile.block.cache.size</entry>
					<entry>用于缓存block的内存所占RegionServer总内存的最大百分比，百分比越高，检索效率也越高，但同时OOM的风险也越大，如果设置为0表示关闭block缓存功能</entry>
					<entry>0.4</entry>
				</row>
				<row>
					<entry>hbase.hstore.blockingStoreFiles</entry>
					<entry>memstore执行flush操作时，如果Region的StoreFiles数量大于指定值，则对这些StoreFiles执行合并操作，合并的同时会阻塞客户端的写请求</entry>
					<entry>10</entry>
				</row>
			</tbody>
		</tgroup>
	</table>
</section>