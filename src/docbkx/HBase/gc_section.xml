<?xml version="1.0" encoding="UTF-8"?>
<section version="5.0" xmlns="http://docbook.org/ns/docbook"
	xmlns:xlink="http://www.w3.org/1999/xlink"
	xmlns:xi="http://www.w3.org/2001/XInclude"
	xmlns:ns5="http://www.w3.org/2000/svg"
	xmlns:ns4="http://www.w3.org/1998/Math/MathML"
	xmlns:ns3="http://www.w3.org/1999/xhtml"
	xmlns:db="http://docbook.org/ns/docbook">
	<title>读写链路GC优化</title>
	<para>针对时延响应要求比较高的java系统，GC往往是最为头疼的问题，一旦控制不当将会产生长时间的STW，为了使GC能够高效的工作，HBase在内存使用上做了如下应对处理：</para>
	<orderedlist>
		<listitem>
			<para>采用堆外内存，并做成缓冲池来循环使用，防止堆内存中老年代产生内存碎片问题。</para>
			<para>老年代中产生内存碎片的主要原因大致如下：默认情况下，新生代中的内存对象在经过15次交换回收之后才会进入老年代，如果读写操作比较频繁，新生代中将会包含大量的chunk和block对象，由于这些对象会在内存中保留一段时间，因此并不会被YGC马上回收掉，从而导致suvivo区间很容易被打满。写满之后，新生代中溢出的数据将直接进入老年代，这些溢出数据通常会包含很多的临时对象，并且每个临时对象的存储空间又很小，不足以容纳一个Block和Chunk。当CMS触发之后，这些临时对象将会被回收，然而其所占用的空间却没有办法再次被有效利用到，从而形成碎片问题。碎片积累过多将会引发promotion fail异常，进而触发fullGc操作，使应用进入长时间的暂停。</para>
			<para>采用堆外内存的方式处理之后，大部分数据对象在拷贝到DirectByteBuffer区域后，都将在新生代中被GC回收掉，从而降低suvivo区间被打满的概率，使临时对象都能在YGC过程中被回收，从而减轻老年代内存碎片问题。</para>
			<para>在2.0版本之前，HBase主要针对BucketCache提供了堆外缓存策略，而在数据写入方面的缓存策略(chunkpool)依然采用堆内的方式进行。2.0版本之后开始提供堆外缓存策略实现(详细参考HBASE-15786)。</para>
		</listitem>
		<listitem>
			<para>优化以下应用来提高堆内存的使用效率(HBASE-15179)。</para>
		</listitem>
	</orderedlist>
	<xi:include href="gc_param.xml"/>
</section>