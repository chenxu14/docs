<?xml version="1.0" encoding="UTF-8"?>
<section version="5.0" xmlns="http://docbook.org/ns/docbook"
	xmlns:xlink="http://www.w3.org/1999/xlink"
	xmlns:xi="http://www.w3.org/2001/XInclude"
	xmlns:ns5="http://www.w3.org/2000/svg"
	xmlns:ns4="http://www.w3.org/1998/Math/MathML"
	xmlns:ns3="http://www.w3.org/1999/xhtml"
	xmlns:db="http://docbook.org/ns/docbook">
	<title>Kerberos认证</title>
	<para>kerberos是基于tickets的计算机网络授权协议，通过它允许计算机节点在不安全的网络环境下进行安全的通信(前提：通信的每台机器与KDC时间同步)，Kerberos的核心工作主要依赖于KDC，拿淘宝B2C模式举例，如果Client是消费者，Server是提供商，则KDC充当支付宝的角色，协调两者之间的信赖关系。</para>
	<section>
		<title>认证流程</title>
		<para>Kerberos的认证流程如下图所示(注：这里主要描述了Client与KDC的认证逻辑，Client与Server的认证参考下一章节的应用场景)</para>
		<figure id='kerberos.authentication'>
			<title>kerberos认证流程</title>
			<mediaobject>
				<imageobject>
					<imagedata contentdepth="100%" width="100%" scalefit="1" fileref="../../media/common/security/kerberos-workflow.jpg"></imagedata>
				</imageobject>
			</mediaobject>
		</figure>
		<para>图释说明：KDC主要由AS、TGS和密钥数据库组成。AS用于校验principal是否存在，TGS用于为principal授权票据，所有的principal和登录密码全部注册到密钥数据库中。</para>
		<orderedlist>
			<listitem>
				<para>客户端通过kinit向KDC申请TGT,将自身的principal发送给AS进行认证。(TGT相当于KDC的使用令牌，Client拥有该令牌后才可与KDC进行交互)</para>
			</listitem>
			<listitem>
				<para>AS查询密钥数据库判断用户的principal是否在数据库中，如果数据库不存在该principal说明用户是非法的，放弃接下来的处理。</para>
			</listitem>
			<listitem>
				<para>通过TGS为principal颁发TGT，同时从密钥数据库中取出Client的登录密码作为密钥对TGT进行外层加密，将加密好的数据发送给Client</para>
				<tip>
					<para>
						TGT是经过双层加密处理的，在里层使用的是<inlinegraphic width='15pt' depth='15pt' fileref="../../media/common/security/key2.jpg" format="JPG"/>，加密的信息包括：会话密钥(user-kdc-session)、TGT过期时间等，外层使用的是<inlinegraphic width='15pt' depth='15pt' fileref="../../media/common/security/key1.jpg" format="JPG"/>，加密的信息有：TGT内和会话密钥(user-kdc-session)，结构如下图所示
						<mediaobject>
							<imageobject>
								<imagedata fileref="../../media/common/security/double-secret.jpg"></imagedata>
							</imageobject>
						</mediaobject>
					</para>
				</tip>
			</listitem>
			<listitem><para>Client收到TGT后使用自身的登录密码对其进行外层的解密，如果解密不成功说明密钥数据库中记录的密码与自身的登录密码不匹配，认证失败。解密成功后得到会话密钥和TGT内，并将TGT保存到本地便于之后的使用</para></listitem>
			<listitem><para>Client向KDC申请对Server的访问需要传递TGT内给TGS，同时对申请内容使用user-kdc-session进行加密</para></listitem>
			<listitem>
				<para>TGS使用自身的密钥<inlinegraphic width='15pt' depth='15pt' fileref="../../media/common/security/key2.jpg" format="JPG"/>对TGT内进行解密，从而也得到了user-kdc-session，在通过user-kdc-session对步骤5中的申请信息进行解密，从而得到所申请Server的principal信息。</para>
				<para>获取到Server的principal后首先判断密钥数据库是否存在该principal，如果不存在说明该Server是不受信任的，放弃授权处理；否则取出server的登录密码，对user-service-ticket进行内层的加密，在使用Client的登录密码进行外层加密。</para>			
				<tip>
					<para>user-service-ticket相当于Server的访问令牌，同TGT一样该票据也是经过双层加密处理的，在里层使用的是<inlinegraphic width='15pt' depth='15pt' fileref="../../media/common/security/key3.jpg" format="JPG"/>，加密的信息包括：Client与Server的会话密钥、Ticket过期时间等；外层使用的是<inlinegraphic width='15pt' depth='15pt' fileref="../../media/common/security/key1.jpg" format="JPG"/>，加密的信息有：内层的user-service-tiket、Client与Server的会话密钥</para>
				</tip>
			</listitem>
			<listitem><para>Client收到双层加密的user-service-tiket后，采用与步骤④和⑤相同的逻辑向Server发送申请</para></listitem>
		</orderedlist>
	</section>
	<section>
		<title>应用场景</title>
		<para>以Hadoop应用场景为例，当我们执行hadoop fs -ls命令时，经过了以下流程处理</para>
		<figure id='hadoop.scenes'>
			<title>Hadoop使用kerberos的应用场景</title>
			<mediaobject>
				<imageobject>
					<imagedata align="center" contentdepth="100%" width="85%" fileref="../../media/common/security/hadoop-scenes.jpg"></imagedata>
				</imageobject>
			</mediaobject>
		</figure>
		<orderedlist>
			<title>图释说明：</title>
			<listitem><para>客户端执行hadoop fs -ls /tmp命令，查看hdfs中tmp文件夹</para></listitem>
			<listitem><para>用户通过RPC服务访问NameNode，Kerberos认证逻辑触发</para></listitem>
			<listitem><para>从本地缓存中取出TGT(user-kdc-ticket,这里假设用户已通过kinit命令获取了TGT)</para></listitem>
			<listitem><para>通过TGT向KDC申请对NameNode的访问，返回user-nn-ticket。该ticket经过双层加密处理，在里层使用的是namenode的登录密码，外层使用的是Client的登录密码</para></listitem>
			<listitem><para>从本地keytab文件中，获取Client的登录密码</para></listitem>
			<listitem><para>Client使用登录密码对user-nn-ticket进行外层的解密，得到与namenode的会话密钥session-key</para></listitem>
			<listitem><para>将user-nn-ticket保存到本地，下次访问NameNode时可不用在向KDC申请</para></listitem>
			<listitem><para>Client声明一个认证符(user-auth通常由principal和时间戳组成)，并使用session-key对其进行加密</para></listitem>
			<listitem><para>将外层解密出来的user-nn-ticket连同加密的认证符一并发送给NameNode</para></listitem>
			<listitem><para>namenode从本地keytab文件中获取自身的登录密码</para></listitem>
			<listitem><para>使用自身的登录密码对Client发送过来的user-nn-ticket进行内层的解密，得到session-key</para></listitem>
			<listitem><para>通过session-key对Client发送过来的认证符进行解密，如果解密成功说明它们的会话密钥是相同的，即Client是通过KDC认证的，是受信任的</para></listitem>
			<listitem><para>Client向namenode认证通过后，namenode还需向Client进行认证，认证方法类似，通过session-key加密认证符，然后发送给Client</para></listitem>
			<listitem><para>将加密后的认证符发送到Client端</para></listitem>
			<listitem><para>Client通过session-key解密认证符</para></listitem>
			<listitem><para>判断解密出的认证符与初始认证符是否相同，若相同则Server认证通过</para></listitem>
			<listitem><para>Client和Server相互认证通过后，发送listFiles申请</para></listitem>
		</orderedlist>
		<para>简化以上的通信逻辑，可得到如下一张图片：</para>
		<figure id='kerberos.simple'>
			<title>简化后的Kerberos认证逻辑</title>
			<mediaobject>
				<imageobject>
					<imagedata fileref="../../media/common/security/kerberos-simple.jpg"></imagedata>
				</imageobject>
			</mediaobject>
		</figure>
	</section>
	<section>
		<title>安装配置</title>
		<orderedlist>
			<listitem>
				<para>首先去官方下载Kerberos的最新版本</para>
				<para>http://web.mit.edu/kerberos/dist/index.html</para>
			</listitem>
			<listitem>
				<para>使用如下命令进行安装</para>
				<para>解压后进入src目录，依次执行./configure、make和make install</para>
			</listitem>
			<listitem>
				<para>配置/etc/krb5.conf文件</para>
				<programlistingco>
					<programlisting>
[logging] <co id="co.kerberos.logging" linkends="co.note.kerberos.logging"/>
    default = FILE:/var/log/krb5libs.log
    kdc = FILE:/var/log/krb5kdc.log
    admin_server = FILE:/var/log/kadmind.log

[libdefaults]
    default_realm = JD.COM <co id="co.kerberos.realm" linkends="co.note.kerberos.realm"/>
    dns_lookup_realm = false
    dns_lookup_kdc = false
    ticket_lifetime = 24h <co id="co.kerberos.tgt.lifetime" linkends="co.note.kerberos.tgt.lifetime"/>
    renew_lifetime = 7d <co id="co.kerberos.tgt.max" linkends="co.note.kerberos.tgt.max"/>
    forwardable = true

[realms]
    JD.COM = {
        kdc = kdc.jd.com <co id="co.kerberos.kdc" linkends="co.note.kerberos.kdc"/>
        admin_server = kadmind.jd.com <co id="co.kerberos.kadmind" linkends="co.note.kerberos.kadmind"/>
    }

[domain_realm] <co id="co.kerberos.mapping" linkends="co.note.kerberos.mapping"/>
    .jd.com = JD.COM
    jd.com = JD.COM
					</programlisting>
					<calloutlist>
						<callout id="co.note.kerberos.logging" arearefs="co.kerberos.logging"><para>进程运行日志存放目录；</para></callout>
						<callout id="co.note.kerberos.realm" arearefs="co.kerberos.realm"><para>执行kinit或kadmin相关命令时，如果没有为指定principal指定realm，则默认采用该realm；</para></callout>
						<callout id="co.note.kerberos.tgt.lifetime" arearefs="co.kerberos.tgt.lifetime"><para>票据授权票据的有效使用时间；</para></callout>
						<callout id="co.note.kerberos.tgt.max" arearefs="co.kerberos.tgt.max"><para>票据授权票据的最长使用时间；</para></callout>
						<callout id="co.note.kerberos.kdc" arearefs="co.kerberos.kdc"><para>kdc进程所在机器节点的hostname；</para></callout>
						<callout id="co.note.kerberos.kadmind" arearefs="co.kerberos.kadmind"><para>kadmind进程所在机器节点的hostname；</para></callout>
						<callout id="co.note.kerberos.mapping" arearefs="co.kerberos.mapping"><para>hostname到realm的映射关系。</para></callout>
					</calloutlist>
				</programlistingco>
			</listitem>
			<listitem>
				<para>配置/usr/local/var/krb5kdc/kdc.conf文件</para>
				<programlistingco>
					<programlisting>
[kdcdefaults]
    kdc_ports = 88,750 

[realms]
    JD.COM = {
        kadmind_port = 749 <co id="co.kadmind.port" linkends="co.note.kadmind.port"/>
        max_life = 12h 0m 0s
        max_renewable_life = 7d 0h 0m 0s
        master_key_type = aes256-cts
        supported_enctypes = aes256-cts:normal aes128-cts:normal
        database_name = /usr/local/var/krb5kdc/principal <co id="co.kdc.db" linkends="co.note.kdc.db"/>
        key_stash_file = /usr/local/var/krb5kdc/.k5.JD.COM <co id="co.kdc.stash" linkends="co.note.kdc.stash"/>
        acl_file = /usr/local/var/krb5kdc/kadm5.acl <co id="co.kdc.acl" linkends="co.note.kdc.acl"/>
        admin_keytab=/usr/local/var/krb5kdc/kadm5.keytab
     }
					</programlisting>
					<calloutlist>
						<callout id="co.note.kadmind.port" arearefs="co.kadmind.port"><para>kadmind进程使用端口号；</para></callout>
						<callout id="co.note.kdc.db" arearefs="co.kdc.db"><para>kdc数据库文件；</para></callout>
						<callout id="co.note.kdc.stash" arearefs="co.kdc.stash"><para>通过stash文件可在操作系统重新启动的时候自动重启kdc进程和kadmind进程而无需手工输入认证信息；</para></callout>
						<callout id="co.note.kdc.acl" arearefs="co.kdc.acl"><para>通过acl文件来配置哪些用户可管理kerberos；</para></callout>
					</calloutlist>
				</programlistingco>
			</listitem>
			<listitem>
				<para>使用如下命令创建KDC数据库</para>
				<para>kdb5_util create -r JD.COM -s </para>
				<para>创建成功后会在/usr/local/var/krb5kdc目录下生成如下4个文件：</para>
				<para>principal、principal.ok、principal.kadm5和principal.kadm5.lock</para>
			</listitem>
			<listitem>
				<para>配置kerberos管理员用户</para>
				<itemizedlist make='bullet'>
					<listitem>
						<para>首先将管理员的principal添加到kadm5.acl配置文件中，如：</para>
						<blockquote><para>admin/admin@JD.COM    *</para></blockquote>
						<para>表示admin/admin@JD.COM 具备所有权限。</para>
					</listitem>
					<listitem>
						<para>然后创建acl配置中对应的principal：</para>
						<programlisting>
shell% kadmin.local
kadmin.local: addprinc admin/admin
输入密码...
密码确认...
						</programlisting>
					</listitem>
				</itemizedlist>
			</listitem>
			<listitem>
				<para>启动krb5kdc和kadmind进程</para>
				<para>shell% krb5kdc</para>
				<para>shell% kadmind</para>
			</listitem>
		</orderedlist>
		<tip><para>kerberos客户端的安装只需要执行前三个步骤即可。</para></tip>
	</section>
	<section>
		<title>常用操作</title>
		<orderedlist>
			<listitem>
				<para>申请指定principal的票据授权票据</para>
				<para>shell% kinit ${principal}</para>
				<tip>如果使用的kerberos版本高于1.8.1，并且使用的jdk版本低于1.7，则会出现访问不到TGT的情况(Mechanism level: Failed to find any Kerberos tgt)，此时还需执行kinit -R命令，以便java能够访问到TGT。</tip>
			</listitem>
			<listitem>
				<para>查看已申请到的票据授权票据</para>
				<para>shell% klist</para>
			</listitem>
			<listitem>
				<para>查看指定keytab中包含的principal</para>
				<para>shell% klist -e -k -t /path/to/keytab</para>
			</listitem>
			<listitem>
				<para>登录kadmin管理控制台</para>
				<itemizedlist make='bullet'>
					<listitem>
						<para>本地登录(在kadmind进程所在机器上登录)</para>
						<para>shell% kadmin.local</para>
					</listitem>
					<listitem>
						<para>远程登录</para>
						<para>shell% kadmin</para>
						<para>可远程登录的前提，当前linux用户具有kerberos管理员用户的TGT(可通过kinit命令申请)。</para>
					</listitem>
				</itemizedlist>
			</listitem>
			<listitem>
				<para>kadmin控制台命令</para>
				<itemizedlist make='bullet'>
					<listitem>
						<para>listprincs</para>
						<para>查看所有注册到KDC中的principal</para>
					</listitem>
					<listitem>
						<para>addprinc</para>
						<para>注册新的principal</para>
					</listitem>
					<listitem>
						<para>delprinc</para>
						<para>删除指定的principal</para>
					</listitem>
					<listitem>
						<para>ktadd</para>
						<para>将指定principal的认证信息添加到本地keytab文件中，keytab文件默认保存在/etc/krb5.keytab目录下，可通过KRB5_KTNAME环境变量进行修改。</para>
					</listitem>
				</itemizedlist>
			</listitem>
		</orderedlist>
	</section>
</section>